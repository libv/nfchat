*dnl Process this file with autoconf to produce a configure script.

AC_INIT(src)
AM_CONFIG_HEADER(config.h)
AM_INIT_AUTOMAKE(NF-chat, 0.3.5)
AC_PROG_CC

AC_PATH_PROG(sedpath, sed)

if test "_$sedpath" = _; then
  AC_MSG_ERROR("Cannot find sed: I need it\!")
fi

AC_PATH_PROG(unamepath, uname)
if test "_$unamepath" = _; then
  system="unknown"
else
  AC_MSG_CHECKING(system type)
  system=`$unamepath -s`
  AC_MSG_RESULT($system)
  if test "$system" = "Linux"; then
    AC_DEFINE(USING_LINUX)
  fi
fi

AC_PATH_PROG(gmakepath, gmake)


dnl *********************************************************************
dnl ** configure switches ***********************************************
dnl *********************************************************************

AC_ARG_ENABLE(debug,
[  --enable-debug          enable use of Memory Debug (default off)],
        debug=$enableval, debug=no)

AC_ARG_ENABLE(socks,
[  --enable-socks          enable use of SOCKS5 (default off)],
        socks=$enableval, socks=no)

dnl *********************************************************************
dnl ** DEBUG ************************************************************
dnl *********************************************************************

if test "$debug" = yes; then
  AC_DEFINE(USE_DEBUG)
fi


dnl *********************************************************************
dnl ** GLIB *************************************************************
dnl *********************************************************************

AC_PATH_PROG(glibpath, glib12-config)
if test "_$glibpath" = _ ; then
  AC_PATH_PROG(glibpath, glib-config)
fi
if test "_$glibpath" = _ ; then
   AC_MSG_ERROR([*** Cannot find glib])
else
  AC_MSG_CHECKING(for Glib compile flags)
  GLIB_CFLAGS=`$glibpath --cflags`
  GLIB_LIBS=`$glibpath gmodule --libs`
  CFLAGS="$CFLAGS $GLIB_CFLAGS"
  LIBS="$LIBS $GLIB_LIBS"
  AC_MSG_RESULT(ok)
  if test "$prefix" = "NONE"; then
    AC_MSG_CHECKING(glib-config for prefix)
    prefix=`$glibpath --prefix`
    AC_MSG_RESULT($prefix)
  fi
  AC_DEFINE_UNQUOTED(PREFIX, "$prefix")
fi

dnl *********************************************************************
dnl ** GTK **************************************************************
dnl *********************************************************************

AM_PATH_GTK(1.2.0, , havenogtk=yes)

if test "$havenogtk" = yes; then
  AC_MSG_ERROR([*** Cannot find GTK])
fi

GUI_LIBS="$GUI_LIBS $GTK_LIBS"
GUI_CFLAGS="$GUI_CFLAGS $GTK_CFLAGS"

dnl *********************************************************************
dnl ** IMLIB ************************************************************
dnl *********************************************************************

AC_PATH_PROG(imlibpath, imlib-config)
AC_MSG_CHECKING(for gdk_imlib)
IMLIB_CFLAGS=`$imlibpath --cflags-gdk 2>/dev/null`
IMLIB_LDFLAGS=`$imlibpath --libs-gdk 2>/dev/null`
if test "_$IMLIB_CFLAGS" = _ ; then
    AC_MSG_ERROR([*** Cannot find imlib])
else
  AC_MSG_RESULT(ok)
  GUI_LIBS="$GUI_LIBS $IMLIB_LDFLAGS"
  GUI_CFLAGS="$GUI_CFLAGS $IMLIB_CFLAGS"
fi

dnl *********************************************************************
dnl ** SOCKS5 ***********************************************************
dnl *********************************************************************

if test "$socks" = yes; then
  socks=no
  AC_CHECK_LIB(socks5, SOCKSconnect, have_socks=yes)
  if test "$have_socks" = yes; then
    AC_CHECK_HEADERS(socks.h, have_socks_h=yes)
    if test "$have_socks_h" = yes; then
      socks=yes
      AC_DEFINE(SOCKS)
      LIBS="$LIBS -lsocks5"
    fi
  fi
fi

dnl *********************************************************************
dnl ** GCC FLAGS ********************************************************
dnl *********************************************************************

dnl Only use -Wall if we have gcc
if test "x$GCC" = "xyes"; then
  if test -z "`echo "$CFLAGS" | grep "\-Wall" 2> /dev/null`" ; then
    CFLAGS="$CFLAGS -Wall"
  fi
  if test "$socks" = yes; then
    CFLAGS="$CFLAGS -w"
  fi
  if test -z "`echo "$CFLAGS" | grep "\-g " 2> /dev/null`" ; then
    CFLAGS="$CFLAGS -g"
  fi
fi

dnl this is strange, but apparently necessary
if test "$system" = "OpenBSD"; then
   CFLAGS="$CFLAGS -pthread"
fi

dnl *********************************************************************
dnl ** FUNCTIONS/LIBS/CFLAGS ********************************************
dnl *********************************************************************

dnl if we don't have this, use g_snprintf instead
AC_CHECK_FUNCS(snprintf)

dnl text-fe's glib replacement wants to know this
AC_CHECK_FUNCS(vsnprintf)

dnl for util.c
AC_CHECK_FUNCS(fnmatch)

dnl old solaris doesn't have this
AC_CHECK_FUNCS(setenv)

dnl purely for Solaris
AC_CHECK_FUNC(select, ,
  AC_CHECK_LIB(socket, select, LIBS="$LIBS -lsocket",
    AC_CHECK_LIB(nsl, select, LIBS="$LIBS -lnsl",
      AC_CHECK_LIB(inet, select, LIBS="$LIBS -linet",
        AC_CHECK_LIB(cposix, select, LIBS="$LIBS -lcposix",
          AC_CHECK_LIB(net, select, LIBS="$LIBS -lnet",
            AC_MSG_WARN(i can not find select.  you might need to help me)))))))

AC_CHECK_FUNC(gethostbyname, ,
  AC_CHECK_LIB(resolv, gethostbyname, LIBS="$LIBS -lresolv",
    AC_CHECK_LIB(nsl, gethostbyname, LIBS="$LIBS -lnsl")))

AC_CHECK_FUNC(gethostname, ,
  AC_CHECK_LIB(nsl, gethostname, LIBS="$LIBS -lnsl"))

dnl necessary for IRIX
AC_CHECK_HEADERS(strings.h)

GUI_LIBS="$LIBS $GUI_LIBS"
GUI_CFLAGS="$CFLAGS $GUI_CFLAGS"

AC_SUBST(GUI_LIBS)
AC_SUBST(GUI_CFLAGS)

AC_OUTPUT([
Makefile 
src/Makefile
])


echo
echo \-\*\- NF-Chat $VERSION \-\*\-
echo
echo Building with GTK+ version .......: `gtk-config --version`
echo Building with ImLib version...... : `imlib-config --version`
echo Building with SOCKS5 ............ : $socks
echo Build System .................... : $system
echo Install Prefix .................. : $prefix
echo

echo configure complete, now type \'make\'
echo
